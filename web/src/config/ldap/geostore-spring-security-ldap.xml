<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"

	xmlns:security="http://www.springframework.org/schema/security"

	xmlns:cxf="http://cxf.apache.org/core" xmlns:jaxws="http://cxf.apache.org/jaxws"
	xmlns:jaxrs="http://cxf.apache.org/jaxrs"

	xsi:schemaLocation="
            http://www.springframework.org/schema/beans     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://cxf.apache.org/jaxws                     http://cxf.apache.org/schemas/jaxws.xsd
            http://cxf.apache.org/jaxrs                     http://cxf.apache.org/schemas/jaxrs.xsd
            http://cxf.apache.org/core                      http://cxf.apache.org/schemas/core.xsd
            http://www.springframework.org/schema/security  http://www.springframework.org/schema/security/spring-security.xsd
            http://www.springframework.org/schema/context   http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	default-autowire="byName">

	<!-- ==================================================================== -->
	<!-- === REST Security ================================================== -->
	<!-- ==================================================================== -->
	<security:global-method-security secured-annotations="enabled" />

	<security:http auto-config="true" create-session="never" >
		<security:http-basic entry-point-ref="restAuthenticationEntryPoint"/>
        <security:csrf disabled="true"/>
		<security:custom-filter ref="authenticationTokenProcessingFilter" before="FORM_LOGIN_FILTER"/>
		<security:custom-filter ref="sessionTokenProcessingFilter" after="FORM_LOGIN_FILTER"/>
        <security:custom-filter ref="keycloakFilter" before="BASIC_AUTH_FILTER"/>
        <security:custom-filter ref="googleOpenIdFilter" after="BASIC_AUTH_FILTER"/>
		<security:anonymous />
	</security:http>
	<!-- Entry point -->
	<bean id="restAuthenticationEntryPoint" class="it.geosolutions.geostore.services.rest.security.RestAuthenticationEntryPoint" >
		<property name="realmName" value="GeoStore"></property>
	</bean>
	<!-- GeoStore Auth Provider -->
	<bean id="geoStoreUserServiceAuthenticationProvider"
		class="it.geosolutions.geostore.services.rest.security.UserServiceAuthenticationProvider">
	</bean>

	<bean class="it.geosolutions.geostore.services.rest.security.UserAttributeTokenAuthenticationFilter"
        id="authenticationTokenProcessingFilter">
	</bean>

	<bean class="it.geosolutions.geostore.services.rest.security.SessionTokenAuthenticationFilter"
        id="sessionTokenProcessingFilter">
	</bean>

	<security:authentication-manager>
        <security:authentication-provider ref='geoStoreUserServiceAuthenticationProvider' />
        <security:authentication-provider ref='geostoreLdapProvider' />
    </security:authentication-manager>

    <!-- LDAP Provider configuration -->
	<bean id="contextSource" class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
		<!-- <constructor-arg value="ldap://${ldap.host}:${ldap.port}/${ldap.root}" /> -->
		<constructor-arg value="ldap://ldapd01.imm.gub.uy:389/dc=imm,dc=gub,dc=uy" />
        <!-- <property name="userDn" value="${ldap.userDn}"/> -->
		<property name="userDn" value="cn=ldapgeoserver,ou=usuarios,dc=imm,dc=gub,dc=uy"/>
        <!-- <property name="password" value="${ldap.password}"/> -->
		<property name="password" value="ldapg30server"/>
	</bean>

    <bean id="ldapInitializer" class="it.geosolutions.geostore.init.LDAPInit" lazy-init="false">
       <constructor-arg ref="geostoreLdapProvider" />
    </bean>

	<bean id="geostoreLdapProvider"
		class="it.geosolutions.geostore.services.rest.security.UserLdapAuthenticationProvider">
		<constructor-arg>
			<bean
				class="org.springframework.security.ldap.authentication.BindAuthenticator">
				<constructor-arg ref="contextSource" />
				<property name="userSearch">
					<bean id="userSearch"
						class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch">
						<!-- <constructor-arg index="0" value="${ldap.userBase}" /> -->
						<constructor-arg index="0" value="ou=people" />
						<!-- <constructor-arg index="1" value="${ldap.userFilter}" /> -->
						<constructor-arg index="1" value="(member=cn={0},ou=usuarios,dc=imm,dc=gub,dc=uy)" />
						<constructor-arg index="2" ref="contextSource" />
					</bean>
				</property>
			</bean>
		</constructor-arg>
		<constructor-arg>
			<bean
				class="it.geosolutions.geostore.services.rest.security.GeoStoreLdapAuthoritiesPopulator">
				<constructor-arg ref="contextSource" />
				<!-- groupSearchBase -->
				<!-- <constructor-arg value="${ldap.groupBase}" /> -->
				<constructor-arg value="ou=workspace,ou=Geoserver,ou=grupos" />
				<!-- roleSearchBase -->
				<!-- <constructor-arg value="${ldap.roleBase}" />
				<property name="groupSearchFilter" value="${ldap.groupFilter}" />
				<property name="roleSearchFilter" value="${ldap.roleFilter}" /> -->
				<constructor-arg value="ou=groups" />
				<property name="groupSearchFilter" value="(member={0})" />
				<property name="roleSearchFilter" value="(member={0})" />

				<!-- nested groups support -->
				<!-- <property name="enableHierarchicalGroups" value="${ldap.hierachicalGroups}" />
				<property name="groupInGroupSearchFilter" value="${ldap.nestedGroupFilter}" />
				<property name="maxLevelGroupsSearch" value="${ldap.nestedGroupLevels}" /> -->
				<property name="enableHierarchicalGroups" value="true" />
				<property name="groupInGroupSearchFilter" value="(member={1})" />
				<property name="maxLevelGroupsSearch" value="10" />
				<!-- the GeoStore convention is:
				  * Groups starting with 'ROLE_' will be threated as Auth Roles
				  * Groups starting withOUT 'ROLE_' will be threated as Groups
				 -->
				<property name="rolePrefix" value="ROLE_" />
				<!-- <property name="searchSubtree" value="${ldap.searchSubtree}" />
				<property name="convertToUpperCase" value="${ldap.convertToUpperCase}" /> -->
				<property name="searchSubtree" value="true" />
				<property name="convertToUpperCase" value="true" />
			</bean>
		</constructor-arg>
	</bean>
    <!-- enable direct connection mode
    <bean id="ldapUserDAO" class="it.geosolutions.geostore.core.dao.ldap.impl.UserDAOImpl">
        <constructor-arg ref="contextSource"/>
        <property name="searchBase" value="${ldap.userBase}"/>
        <property name="memberPattern" value="${ldap.memberPattern}"/>
        <property name="attributesMapper">
            <map>
                <entry key="mail" value="email"/>
                <entry key="givenName" value="fullname"/>
                <entry key="description" value="description"/>
            </map>
        </property>
    </bean>
    <bean id="ldapUserGroupDAO" class="it.geosolutions.geostore.core.dao.ldap.impl.UserGroupDAOImpl">
        <constructor-arg ref="contextSource"/>
        <property name="searchBase" value="${ldap.groupBase}"/>
        <property name="addEveryOneGroup" value="true"/>
    </bean>


    <alias name="ldapUserGroupDAO" alias="userGroupDAO"/>
    <alias name="externalSecurityDAO" alias="SecurityDAO"/>
    <alias name="ldapUserDAO" alias="userDAO"/>
    -->
    <bean id="preauthenticatedAuthenticationProvider" class="it.geosolutions.geostore.services.rest.security.PreAuthenticatedAuthenticationProvider">
    </bean>

    <!-- OAuth2 beans -->
    <context:annotation-config/>

    <bean id="googleSecurityConfiguration" class="it.geosolutions.geostore.services.rest.security.oauth2.google.OAuthGoogleSecurityConfiguration"/>

    <!-- Keycloak -->

    <bean id="keycloakConfig" class="it.geosolutions.geostore.services.rest.security.keycloak.KeyCloakSecurityConfiguration"/>

    <!-- END OAuth2 beans-->
</beans>
